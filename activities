
/**
 * Fetches account activities from Alpaca for the last 90 days,
 * filters out 'FILL' activities, and writes the remaining activities
 * to a new or existing sheet named "Other Activities".
 * It only appends new activities to avoid re-writing existing data.
 */
function updateOtherActivitiesSheet() {
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var otherActivitiesSheet = ss.getSheetByName("Other Activities");

  Logger.log("--- Starting updateOtherActivitiesSheet ---");

  // Create sheet if it doesn't exist
  if (!otherActivitiesSheet) {
    Logger.log("Creating new 'Other Activities' sheet.");
    otherActivitiesSheet = ss.insertSheet("Other Activities");
  } else {
    Logger.log("Found 'Other Activities' sheet.");
    // Clear content but leave the header row if the sheet already exists
    if (otherActivitiesSheet.getLastRow() > 1) {
      otherActivitiesSheet.getRange("A2:Z").clearContent();
      Logger.log("Cleared existing data (A2:Z) in 'Other Activities' sheet.");
    }
  }

  // Define comprehensive headers for various activity types
  var headers = [
    "ID", "Activity Type", "Date", "Symbol", "Quantity", "Price", "Side",
    "Net Amount", "Description", "Transaction Time", "Type", "Status",
    "Per Share Amount", "Withholding Tax", "Settled At", "Asset Class",
    "Cumulative Quantity", "Leaves Quantity", "Order ID", "Client Order ID",
    "Order Type", "Time in Force", "Asset ID", "External ID", "Custodian ID",
    "Account ID", "Subaccount ID", "Funding Type", "Direction", "Method",
    "Reason", "Comments", "Source", "Destination", "Amount", "Fee"
  ];
  
  // Write headers to ensure they are present and correct
  otherActivitiesSheet.getRange(1, 1, 1, headers.length).setValues([headers]).setFontWeight("bold");
  otherActivitiesSheet.autoResizeColumns(1, headers.length); // Auto-resize headers
  Logger.log("Headers written to 'Other Activities' sheet.");

  // --- Retrieve existing activity IDs from the sheet to prevent duplicates ---
  var existingActivityIds = new Set();
  if (otherActivitiesSheet.getLastRow() > 1) {
    var existingDataRange = otherActivitiesSheet.getRange("A2:A" + otherActivitiesSheet.getLastRow());
    existingDataRange.getValues().forEach(function(row) {
      if (row[0]) { 
        existingActivityIds.add(row[0]);
      }
    });
  }
  Logger.log("Number of existing activity IDs on sheet: " + existingActivityIds.size);

  // --- Fetch all activities using the helper function ---
  Logger.log("Calling listActivities() to retrieve all activities from Alpaca.");
  var allActivities = listActivities(); 
  Logger.log("Total activities retrieved from Alpaca (last 90 days): " + allActivities.length);

  // --- Filter for new activities that are NOT 'FILL' ---
  Logger.log("Filtering for new activities that are NOT 'FILL' and not already on the sheet.");
  var newOtherActivities = allActivities.filter(function(activity) {
    var isNotFill = (activity.activity_type !== "FILL");
    var isNew = !existingActivityIds.has(activity.id);

    if (isNotFill && isNew) {
      Logger.log("  NEW OTHER ACTIVITY: ID: " + activity.id + ", Type: " + activity.activity_type);
    } else if (!isNew) {
      Logger.log("  EXISTING OTHER ACTIVITY (skipped): ID: " + activity.id + ", Type: " + activity.activity_type);
    }
    return isNotFill && isNew;
  });

  Logger.log("Number of NEW 'other' activities found to write: " + newOtherActivities.length);

  // --- Prepare data for writing to the sheet ---
  if (newOtherActivities.length > 0) {
    Logger.log("Preparing data for " + newOtherActivities.length + " new 'other' activities.");
    var activityData = newOtherActivities.map(function(activity) {
      return [
        activity.id || "", activity.activity_type || "", activity.date || "", activity.symbol || "",
        activity.qty || "", activity.price || "", activity.side || "", activity.net_amount || "",
        activity.description || "", activity.transaction_time || "", activity.type || "", activity.status || "",
        activity.per_share_amount || "", activity.withholding_tax || "", activity.settled_at || "",
        activity.asset_class || "", activity.cum_qty || "", activity.leaves_qty || "", activity.order_id || "",
        activity.client_order_id || "", activity.order_type || "", activity.time_in_force || "",
        activity.asset_id || "", activity.external_id || "", activity.custodian_id || "",
        activity.account_id || "", activity.subaccount_id || "", activity.funding_type || "",
        activity.direction || "", activity.method || "", activity.reason || "", activity.comments || "",
        activity.source || "", activity.destination || "", activity.amount || "", activity.fee || ""
      ];
    });

    // Append data starting from the last row + 1
    otherActivitiesSheet.getRange(otherActivitiesSheet.getLastRow() + 1, 1, activityData.length, activityData[0].length).setValues(activityData);
    otherActivitiesSheet.autoResizeColumns(1, activityData[0].length);
    Logger.log("Successfully wrote new 'other' activity data to 'Other Activities' sheet.");
  } else {
    Logger.log("No NEW 'other' activities to write to 'Other Activities' sheet.");
  }
  Logger.log("--- Finished updateOtherActivitiesSheet ---");
}


/**
 * Copies the "Filled Orders" tab to a new sheet,
 * transforms the data by adjusting quantity for sell orders,
 * calculates position net cost,
 * orders the data by symbol, and then groups it by symbol
 * showing the total adjusted quantity and total position net cost.
 */
function processFilledOrdersSnapshot() {
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var filledOrdersSheet = ss.getSheetByName("Filled Orders");

  if (!filledOrdersSheet) {
    Logger.log("Error: 'Filled Orders' sheet not found. Please run updatefilledSheet() first.");
    SpreadsheetApp.getUi().alert("Error", "'Filled Orders' sheet not found. Please run updatefilledSheet() first.", SpreadsheetApp.getUi().ButtonSet.OK);
    return;
  }

  // Create a new sheet with a timestamped name
  var timestamp = Utilities.formatDate(new Date(), ss.getSpreadsheetTimeZone(), "yyyyMMdd_HHmmss");
  var newSheetName = "Filled_Summary_" + timestamp;
  var summarySheet = ss.insertSheet(newSheetName);
  Logger.log("Created new summary sheet: " + newSheetName);

  // Get all data from "Filled Orders" sheet (including headers)
  var allFilledData = filledOrdersSheet.getDataRange().getValues();

  if (allFilledData.length <= 1) { // Only headers or no data
    Logger.log("No filled order data to process beyond headers.");
    summarySheet.appendRow(["No filled orders to summarize."]);
    return;
  }

  // Extract headers and data rows
  var headers = allFilledData[0];
  var dataRows = allFilledData.slice(1); // All rows except the header

  // Find column indices dynamically
  // These indices must match the headers defined in updatefilledSheet
  var idCol = headers.indexOf("ID");
  var symbolCol = headers.indexOf("Symbol");
  var quantityCol = headers.indexOf("Quantity");
  var sideCol = headers.indexOf("Side");
  var filledAvgPriceCol = headers.indexOf("Filled Avg Price"); 

  if (idCol === -1 || symbolCol === -1 || quantityCol === -1 || sideCol === -1 || filledAvgPriceCol === -1) {
    Logger.log("Error: Required columns (ID, Symbol, Quantity, Side, Filled Avg Price) not found in 'Filled Orders' sheet or headers changed.");
    SpreadsheetApp.getUi().alert("Error", "Required columns (ID, Symbol, Quantity, Side, Filled Avg Price) not found in 'Filled Orders' sheet. Ensure headers are correct.", SpreadsheetApp.getUi().ButtonSet.OK);
    return;
  }

  // --- Step 1: Add Adjusted Quantity and Position Net Cost columns ---
  var processedData = [];
  dataRows.forEach(function(row) {
    var orderId = row[idCol]; // Keep ID for logging
    var symbol = row[symbolCol];
    var quantity = parseFloat(row[quantityCol]); 
    var side = row[sideCol];
    var filledAvgPrice = parseFloat(row[filledAvgPriceCol]); 

    // Handle potential non-numeric values gracefully
    if (isNaN(quantity)) {
      Logger.log("Warning: Quantity is not a number for order ID: " + orderId + ", Symbol: " + symbol);
      quantity = 0;
    }
    if (isNaN(filledAvgPrice)) {
      Logger.log("Warning: Filled Avg Price is not a number for order ID: " + orderId + ", Symbol: " + symbol);
      filledAvgPrice = 0;
    }

    var adjustedQuantity = quantity;
    if (side && typeof side === 'string' && side.toLowerCase() === 'sell') {
      adjustedQuantity = -quantity;
    }

    // Step 1b: Calculate Position Net Cost
    var positionNetCost = adjustedQuantity * filledAvgPrice;
    
    // Create a new row with original data + adjusted quantity + position net cost
    var newRow = row.slice(); // Create a copy of the original row
    newRow.push(adjustedQuantity); // Add adjusted quantity as a new column
    newRow.push(positionNetCost); // Add position net cost as another new column
    processedData.push(newRow);
  });

  // Add new headers for the processed data
  var newHeaders = headers.slice();
  newHeaders.push("Adjusted Quantity");
  newHeaders.push("Position Net Cost"); 

  // --- Step 2: Order the data by Symbol ---
  processedData.sort(function(a, b) {
    var symbolA = (a[symbolCol] || "").toString().toUpperCase(); 
    var symbolB = (b[symbolCol] || "").toString().toUpperCase();
    if (symbolA < symbolB) return -1;
    if (symbolA > symbolB) return 1;
    return 0;
  });
  Logger.log("Data sorted by Symbol.");

  // --- Step 3: Group the data by Symbol and sum Adjusted Quantity and Position Net Cost ---
  var groupedData = {}; // Object to store sums by symbol

  // The adjusted quantity is now the second to last element, and net cost is the last
  var adjustedQuantityIndex = newHeaders.length - 2; 
  var positionNetCostIndex = newHeaders.length - 1;

  processedData.forEach(function(row) {
    var symbol = row[symbolCol];
    var adjQty = row[adjustedQuantityIndex];
    var netCost = row[positionNetCostIndex];

    if (!groupedData[symbol]) {
      groupedData[symbol] = { totalAdjQty: 0, totalNetCost: 0 };
    }
    groupedData[symbol].totalAdjQty += adjQty;
    groupedData[symbol].totalNetCost += netCost;
  });
  Logger.log("Data grouped by Symbol.");

  // Prepare data for the summary sheet
  var summaryData = [];
  summaryData.push(["Symbol", "Total Adjusted Quantity", "Total Position Net Cost"]); // Updated Summary headers

  for (var symbol in groupedData) {
    summaryData.push([symbol, groupedData[symbol].totalAdjQty, groupedData[symbol].totalNetCost]);
  }

  // Write summary data to the new sheet
  summarySheet.getRange(1, 1, summaryData.length, summaryData[0].length).setValues(summaryData);
  summarySheet.autoResizeColumns(1, summaryData[0].length);
  // Format the quantity and cost columns
  if (summaryData.length > 1) { // Apply format only if there's data beyond headers
    summarySheet.getRange(2, 2, summaryData.length -1, 1).setNumberFormat("#,###"); // Total Adjusted Quantity
    summarySheet.getRange(2, 3, summaryData.length -1, 1).setNumberFormat("$#,##0.00"); // Total Position Net Cost
  }
  Logger.log("Summary data written to " + newSheetName);
}
